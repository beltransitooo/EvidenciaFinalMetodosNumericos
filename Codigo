import java.util.Scanner;

public class Biseccion {

 // Función f(x) = x^3 - x - 2
    public static double funcion(double x) {
        return Math.pow(x, 3) - x - 2;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

 // Entrada de datos
        System.out.print("Ingrese el límite inferior a: ");
        double a = sc.nextDouble();
        System.out.print("Ingrese el límite superior b: ");
        double b = sc.nextDouble();
        System.out.print("Ingrese la tolerancia (por ejemplo 0.0001): ");
        double tol = sc.nextDouble();
        System.out.print("Ingrese el número máximo de iteraciones: ");
        int maxIter = sc.nextInt();

 // Verifica condición para aplicar bisección
        if (funcion(a) * funcion(b) >= 0) {
            System.out.println("Error: f(a) y f(b) deben tener signos opuestos.");
            return;
        }

        double c = a;
        int iter = 0;

        System.out.println("\nIteración\t a\t\t b\t\t c\t\t f(c)");

// Iteraciones del método de bisección
        while ((b - a) / 2 > tol && iter < maxIter) {
            c = (a + b) / 2;
            double fc = funcion(c);

            System.out.printf("%d\t\t %.6f\t %.6f\t %.6f\t %.6f\n", iter + 1, a, b, c, fc);

            if (fc == 0.0)
                break; // Raíz exacta
            else if (funcion(a) * fc < 0)
                b = c;
            else
                a = c;

            iter++;
        }

  // Resultado final
        System.out.printf("\nAproximación de la raíz: %.6f\n", c);
        sc.close();
    }

    @Override
    public String toString() {
        return "Biseccion []";
    }
}

